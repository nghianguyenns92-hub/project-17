<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tu Tiên Cùng AI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap');
        body { font-family: 'Inter', sans-serif; }
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #1f2937; }
        ::-webkit-scrollbar-thumb { background: #374151; border-radius: 4px; }
        ::-webkit-scrollbar-thumb:hover { background: #4b5563; }
        .justified-text { text-align: justify; }
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-100 flex h-screen w-screen overflow-hidden p-4">

    <!-- Main Game Container -->
    <div class="flex-grow flex flex-col p-4 bg-gray-800 rounded-lg shadow-xl mr-4 overflow-hidden">
        <!-- Game Title and Welcome -->
        <header class="text-center mb-4 border-b border-gray-700 pb-2">
            <h1 class="text-3xl font-bold text-teal-400">Tu Tiên Cùng AI</h1>
            <p class="text-sm text-gray-400 mt-1">Hành trình của bạn bắt đầu tại đây...</p>
        </header>

        <!-- Story Display Area -->
        <div id="story-display" class="flex-grow overflow-y-auto pr-2 mb-4 bg-gray-800 rounded-md">
            <!-- Initial content generated by JS -->
            <div class="mb-4 p-4 rounded-lg bg-gray-900 text-left">
                <p class="whitespace-pre-wrap justified-text">Nhập tên của ngươi để bắt đầu hành trình!</p>
            </div>
        </div>
        
        <!-- Loading Indicator -->
        <div id="loading-indicator" class="hidden text-center text-teal-400 mb-2">
            <div class="spinner mx-auto mb-1"></div>
            Đang suy tư...
        </div>

        <!-- User Input Area -->
        <div class="flex flex-col space-y-2">
            <div id="choices-container" class="hidden flex-wrap gap-2 mt-4"></div>
            <div id="input-container" class="flex items-center space-x-2">
                <textarea id="user-input" class="flex-grow p-3 bg-gray-700 text-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 transition-all duration-200 resize-none" rows="1" placeholder="Nhập hành động của bạn..."></textarea>
                <button id="send-btn" class="px-6 py-3 bg-teal-600 hover:bg-teal-700 transition-colors duration-200 rounded-lg font-bold">Gửi</button>
            </div>
        </div>
    </div>

    <!-- Right-side Menu/Sidebar -->
    <div class="flex-shrink-0 w-64 p-4 bg-gray-800 rounded-lg shadow-xl flex flex-col items-center space-y-4">
        <h2 class="text-2xl font-bold text-gray-300">Hệ thống</h2>
        <p id="user-id-display" class="text-sm text-gray-400 break-words w-full text-center"></p>
        <button id="stats-btn" class="w-full py-3 bg-gray-700 hover:bg-gray-600 transition-colors duration-200 rounded-lg font-bold">Chỉ số</button>
        <button id="inventory-btn" class="w-full py-3 bg-gray-700 hover:bg-gray-600 transition-colors duration-200 rounded-lg font-bold">Trang bị</button>
        <button id="wealth-btn" class="w-full py-3 bg-gray-700 hover:bg-gray-600 transition-colors duration-200 rounded-lg font-bold">Tài phú</button>
        <button id="factions-btn" class="w-full py-3 bg-gray-700 hover:bg-gray-600 transition-colors duration-200 rounded-lg font-bold">Thế lực</button>
        <button id="save-btn" class="w-full py-3 bg-indigo-600 hover:bg-indigo-700 transition-colors duration-200 rounded-lg font-bold mt-auto">Lưu trữ</button>
        <button id="load-btn" class="w-full py-3 bg-indigo-600 hover:bg-indigo-700 transition-colors duration-200 rounded-lg font-bold">Tải lên</button>
    </div>

    <!-- Custom Modal for displaying information -->
    <div id="modal-backdrop" class="fixed inset-0 bg-black bg-opacity-75 hidden items-center justify-center p-4 z-50">
        <div id="modal-content" class="bg-gray-800 p-6 rounded-lg shadow-2xl max-w-lg w-full">
            <h3 id="modal-title" class="text-xl font-bold mb-4 text-teal-400"></h3>
            <div id="modal-body" class="text-gray-300 max-h-96 overflow-y-auto"></div>
            <button id="close-modal-btn" class="mt-4 px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg font-bold">Đóng</button>
        </div>
    </div>

    <script type="module">
        // Firebase imports and setup
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithCustomToken, signInAnonymously } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, getDoc, setDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        
        // Firebase global variables provided by the Canvas environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        let db, auth;
        let userId = null;

        window.firebaseInitPromise = (async () => {
            try {
                const app = initializeApp(firebaseConfig);
                auth = getAuth(app);
                db = getFirestore(app);

                // Sign in with custom token or anonymously if not available
                if (initialAuthToken) {
                    await signInWithCustomToken(auth, initialAuthToken);
                } else {
                    await signInAnonymously(auth);
                }
                
                userId = auth.currentUser?.uid || crypto.randomUUID();
                console.log("Firebase initialized successfully. User ID:", userId);
            } catch (error) {
                console.error("Firebase initialization failed:", error);
            }
        })();

        // Game State and UI Elements
        let gameState = {
            story: [{ role: "model", content: "Nhập tên của ngươi để bắt đầu hành trình!" }],
            character: null,
            inventory: null,
            isProcessing: false,
            isInitialized: false,
            choices: null,
        };

        const tuViData = {
            "Phàm nhân": {
                order: 0,
                minor_realms: [
                    { name: "Sơ kỳ", tuoi_tho: 110, linh_luc: 100 },
                    { name: "Trung kỳ", tuoi_tho: 120, linh_luc: 200 },
                    { name: "Hậu kỳ", tuoi_tho: 130, linh_luc: 300 },
                    { name: "Viên mãn", tuoi_tho: 140, linh_luc: 400 },
                ]
            },
            "Luyện Khí": {
                order: 1,
                minor_realms: [
                    { name: "Sơ kỳ", tuoi_tho: 250, linh_luc: 1300 },
                    { name: "Trung kỳ", tuoi_tho: 280, linh_luc: 1700 },
                    { name: "Hậu kỳ", tuoi_tho: 330, linh_luc: 2300 },
                    { name: "Viên mãn", tuoi_tho: 390, linh_luc: 2900 },
                ]
            },
            "Trúc Cơ": {
                order: 2,
                minor_realms: [
                    { name: "Sơ kỳ", tuoi_tho: 410, linh_luc: 3100 },
                    { name: "Trung kỳ", tuoi_tho: 560, linh_luc: 4600 },
                    { name: "Hậu kỳ", tuoi_tho: 710, linh_luc: 6100 },
                ]
            },
            "Kết Đan": {
                order: 3,
                minor_realms: [
                    { name: "Sơ kỳ", tuoi_tho: 860, linh_luc: 8600 },
                    { name: "Trung kỳ", tuoi_tho: 1160, linh_luc: 11600 },
                    { name: "Hậu kỳ", tuoi_tho: 1460, linh_luc: 14600 },
                ]
            },
            "Nguyên Anh": {
                order: 4,
                minor_realms: [
                    { name: "Sơ kỳ", tuoi_tho: 1760, linh_luc: 17600 },
                    { name: "Trung kỳ", tuoi_tho: 2360, linh_luc: 23600 },
                    { name: "Hậu kỳ", tuoi_tho: 2960, linh_luc: 29600 },
                ]
            },
            "Hóa Thần": {
                order: 5,
                minor_realms: [
                    { name: "Sơ kỳ", tuoi_tho: 3260, linh_luc: 32900 },
                    { name: "Trung kỳ", tuoi_tho: 4560, linh_luc: 44600 },
                    { name: "Hậu kỳ", tuoi_tho: 6060, linh_luc: 59600 },
                ]
            },
            "Luyện Hư": {
                order: 6,
                minor_realms: [
                    { name: "Sơ kỳ", tuoi_tho: 7560, linh_luc: 79600 },
                    { name: "Trung kỳ", tuoi_tho: 11060, linh_luc: 119600 },
                    { name: "Hậu kỳ", tuoi_tho: 15060, linh_luc: 159600 },
                ]
            },
            "Đại thừa": {
                order: 7,
                minor_realms: [
                    { name: "Sơ kỳ", tuoi_tho: 17060, linh_luc: 179600 },
                    { name: "Trung kỳ", tuoi_tho: 22060, linh_luc: 229600 },
                    { name: "Hậu kỳ", tuoi_tho: 25060, linh_luc: 259600 },
                ]
            },
            "Độ kiếp": {
                order: 8,
                minor_realms: [
                    { name: "Sơ kỳ", tuoi_tho: 27060, linh_luc: 279600 },
                    { name: "Trung kỳ", tuoi_tho: 32060, linh_luc: 329600 },
                    { name: "Hậu kỳ", tuoi_tho: 35060, linh_luc: 359600 },
                ]
            }
        };
        const tuViOrder = Object.keys(tuViData);

        // DOM elements
        const storyDisplay = document.getElementById('story-display');
        const userInput = document.getElementById('user-input');
        const sendBtn = document.getElementById('send-btn');
        const loadingIndicator = document.getElementById('loading-indicator');
        const modalBackdrop = document.getElementById('modal-backdrop');
        const modalTitle = document.getElementById('modal-title');
        const modalBody = document.getElementById('modal-body');
        const closeModalBtn = document.getElementById('close-modal-btn');
        const statsBtn = document.getElementById('stats-btn');
        const inventoryBtn = document.getElementById('inventory-btn');
        const wealthBtn = document.getElementById('wealth-btn');
        const factionsBtn = document.getElementById('factions-btn');
        const saveBtn = document.getElementById('save-btn');
        const loadBtn = document.getElementById('load-btn');
        const userIdDisplay = document.getElementById('user-id-display');
        const choicesContainer = document.getElementById('choices-container');
        const inputContainer = document.getElementById('input-container');
        
        // UI Rendering Functions
        const updateStoryDisplay = () => {
            storyDisplay.innerHTML = '';
            gameState.story.forEach(message => {
                const messageDiv = document.createElement('div');
                messageDiv.classList.add('mb-4', 'p-4', 'rounded-lg');
                if (message.role === 'user') {
                    messageDiv.classList.add('bg-gray-700', 'text-right');
                } else {
                    messageDiv.classList.add('bg-gray-900', 'text-left');
                }
                const messageText = document.createElement('p');
                messageText.classList.add('whitespace-pre-wrap', 'justified-text');
                messageText.textContent = message.content;
                messageDiv.appendChild(messageText);
                storyDisplay.appendChild(messageDiv);
            });
            if (storyDisplay.lastElementChild) {
                storyDisplay.lastElementChild.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }
        };

        const showModal = (title, content) => {
            modalTitle.textContent = title;
            modalBody.innerHTML = content;
            modalBackdrop.classList.remove('hidden');
            modalBackdrop.classList.add('flex');
        };

        const hideModal = () => {
            modalBackdrop.classList.remove('flex');
            modalBackdrop.classList.add('hidden');
        };

        const updateChoices = () => {
            choicesContainer.innerHTML = '';
            if (gameState.choices && gameState.choices.length > 0) {
                gameState.choices.forEach(choice => {
                    const choiceBtn = document.createElement('button');
                    choiceBtn.textContent = choice;
                    choiceBtn.classList.add('px-4', 'py-2', 'bg-sky-600', 'hover:bg-sky-700', 'rounded-lg', 'font-bold', 'transition-colors');
                    choiceBtn.addEventListener('click', () => {
                        processUserAction(choice);
                    });
                    choicesContainer.appendChild(choiceBtn);
                });
                choicesContainer.classList.remove('hidden');
                inputContainer.classList.add('hidden');
            } else {
                choicesContainer.classList.add('hidden');
                inputContainer.classList.remove('hidden');
            }
        };

        // LLM Interaction (with serverless proxy)
        const callGeminiApi = async (prompt, generationConfig = null) => {
            // NOTE: YOU MUST REPLACE THIS URL WITH THE ACTUAL URL OF YOUR SERVERLESS FUNCTION
            // LƯU Ý: BẠN PHẢI THAY THẾ URL NÀY BẰNG URL THỰC TẾ CỦA HÀM SERVERLESS CỦA BẠN
            const url = `YOUR_SERVERLESS_FUNCTION_URL`; 
            
            if (url.includes('YOUR_SERVERLESS_FUNCTION_URL')) {
                showModal('Lỗi Cấu hình', 'Bạn cần thay thế "YOUR_SERVERLESS_FUNCTION_URL" trong mã nguồn bằng URL thực tế của hàm serverless của mình.');
                return null;
            }

            const payload = { 
                prompt: prompt,
                generationConfig: generationConfig
            };

            let retryCount = 0;
            const maxRetries = 5;

            while (retryCount < maxRetries) {
                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    
                    if (response.status === 429) {
                        const delay = Math.pow(2, retryCount) * 1000;
                        await new Promise(res => setTimeout(res, delay));
                        retryCount++;
                        continue;
                    }

                    if (!response.ok) {
                        throw new Error(`API call failed with status: ${response.status}`);
                    }

                    const result = await response.json();
                    if (result.candidates && result.candidates.length > 0 &&
                        result.candidates[0].content && result.candidates[0].content.parts &&
                        result.candidates[0].content.parts.length > 0) {
                        return result.candidates[0].content.parts[0].text;
                    }
                } catch (error) {
                    console.error("Gemini API call or JSON parse error:", error);
                    break;
                }
            }
            return null;
        };

        const createCharacterAndStory = async (userName) => {
            const prompt = `
                Bạn là một AI kể chuyện tu tiên chuyên tạo ra nhân vật và cốt truyện chi tiết.
                Hãy tạo một nhân vật tu tiên với tên là "${userName}". Dựa trên cái tên này, hãy tạo ra bối cảnh, tính cách, và một cốt truyện mở đầu cho nhân vật. Trả lời dưới dạng JSON với các trường: "character", "story", "inventory", "factions".
                - Trường "character" phải là một đối tượng chứa các thuộc tính: "name" (tên), "background" (bối cảnh, xuất thân), "personality" (tính cách), "special_trait" (đặc điểm nổi bật).
                - Trường "inventory" phải là một đối tượng chứa: "equipped_items" (mảng các vật phẩm đang trang bị), "stored_items" (mảng các vật phẩm trong kho), và "tai_phu" (một đối tượng với linh_thach).
                - Trường "factions" phải là một đối tượng chứa: "the_luc" (mảng các thế lực và mối quan hệ).
                - Trường "story" phải là một chuỗi văn bản kể lại câu chuyện mở đầu.
                - Câu chuyện phải kết thúc bằng một câu hỏi có các lựa chọn có thể nhấp vào, ví dụ: "Ngươi sẽ làm gì? [a. Cứu thiếu nữ] [b. Cứu linh thú]".
            `;
            const generationConfig = {
                responseMimeType: "application/json",
                responseSchema: {
                    type: "OBJECT",
                    properties: {
                        character: {
                            type: "OBJECT",
                            properties: {
                                name: { type: "STRING" },
                                background: { type: "STRING" },
                                personality: { type: "STRING" },
                                special_trait: { type: "STRING" },
                            },
                        },
                        story: { type: "STRING" },
                        inventory: {
                            type: "OBJECT",
                            properties: {
                                equipped_items: { type: "ARRAY", items: { type: "OBJECT" } },
                                stored_items: { type: "ARRAY", items: { type: "OBJECT" } },
                                tai_phu: { type: "OBJECT", properties: { linh_thach: { type: "NUMBER" } } },
                            },
                        },
                        factions: { type: "OBJECT", properties: { the_luc: { type: "ARRAY", items: { type: "OBJECT" } } } },
                    },
                },
            };
            const jsonText = await callGeminiApi(prompt, generationConfig);
            if (jsonText) {
                return JSON.parse(jsonText);
            }
            return null;
        };
        
        // Game Logic
        const processUserAction = async (action) => {
            if (gameState.isProcessing) return;

            gameState.isProcessing = true;
            loadingIndicator.classList.remove('hidden');
            sendBtn.disabled = true;
            userInput.disabled = true;
            
            let responseText = '';
            let choices = null;
            
            try {
                if (!gameState.isInitialized) {
                    const initialResponse = await createCharacterAndStory(action);
                    if (initialResponse) {
                        const story = initialResponse.story;
                        const choicesMatch = story.match(/\[([a-z]\. .+?)\]/g);
                        choices = choicesMatch ? choicesMatch.map(c => c.substring(1, c.length - 1)) : null;
                        responseText = story.replace(/\[([a-z]\. .+?)\]/g, '').trim();

                        const initialChar = {
                            ...initialResponse.character,
                            tu_vi: "Phàm nhân",
                            tieu_canh_gioi: 1,
                            tuoi_tho_hien_tai: Math.floor(Math.random() * 101),
                            tuoi_tho_toi_da: tuViData["Phàm nhân"].minor_realms[0].tuoi_tho,
                            linh_luc: 0,
                            nhuc_than: 1,
                            nguyen_than: 1,
                            thien_phu: "Thường",
                        };

                        gameState = {
                            ...gameState,
                            story: [...gameState.story, { role: "user", content: action }, { role: "model", content: responseText }],
                            character: initialChar,
                            inventory: initialResponse.inventory,
                            isInitialized: true,
                            choices: choices,
                        };
                    } else {
                        responseText = "Đã xảy ra lỗi khi tạo cốt truyện ban đầu. Vui lòng thử lại sau.";
                        gameState = { ...gameState, story: [...gameState.story, { role: "user", content: action }, { role: "model", content: responseText }] };
                    }
                } else {
                    // Game turn logic (simplified)
                    let char = { ...gameState.character };
                    let storyUpdate = [];

                    const prompt = `
                        Bạn là một AI kể chuyện tu tiên.
                        Dựa trên trạng thái hiện tại của trò chơi và lựa chọn của người chơi, hãy tiếp tục câu chuyện.
                        Trạng thái hiện tại:
                        - Nhân vật: ${JSON.stringify(gameState.character)}
                        - Tài sản: ${JSON.stringify(gameState.inventory)}
                        - Lựa chọn của người chơi: ${action}
                        
                        Hãy tạo ra một chuỗi văn bản tiếp tục câu chuyện, mô tả hậu quả của hành động, và kết thúc bằng một câu hỏi có các lựa chọn có thể nhấp vào, ví dụ: "Ngươi sẽ làm gì? [a. Cứu thiếu nữ] [b. Cứu linh thú]".
                        Nếu câu chuyện kết thúc, hãy nói một lời chào tạm biệt.
                    `;
                    const apiResponse = await callGeminiApi(prompt);
                    if (apiResponse) {
                        const choicesMatch = apiResponse.match(/\[([a-z]\. .+?)\]/g);
                        choices = choicesMatch ? choicesMatch.map(c => c.substring(1, c.length - 1)) : null;
                        responseText = apiResponse.replace(/\[([a-z]\. .+?)\]/g, '').trim();
                        storyUpdate.push({ role: "user", content: action }, { role: "model", content: responseText });
                    } else {
                        storyUpdate.push({ role: "user", content: action }, { role: "model", content: "Đã xảy ra lỗi. Vui lòng thử lại." });
                    }
                    gameState = {
                        ...gameState,
                        story: [...gameState.story, ...storyUpdate],
                        character: char,
                        choices: choices,
                    };
                }
            } catch (error) {
                console.error("Error processing user action:", error);
                const errorMessage = "Đã xảy ra lỗi hệ thống. Vui lòng thử lại sau.";
                gameState = {
                    ...gameState,
                    story: [...gameState.story, { role: "model", content: errorMessage }],
                };
            } finally {
                updateStoryDisplay();
                updateChoices();
                loadingIndicator.classList.add('hidden');
                sendBtn.disabled = false;
                userInput.disabled = false;
                userInput.value = '';
                gameState.isProcessing = false;
            }
        };

        // Firestore Save/Load Functions
        const saveGame = async () => {
            try {
                await window.firebaseInitPromise;
                if (!userId || !db) {
                    showModal('Lỗi', 'Không thể lưu trò chơi. Firebase chưa được khởi tạo.');
                    return;
                }
                const docRef = doc(db, `/artifacts/${appId}/users/${userId}/saves/save_data`);
                await setDoc(docRef, { data: JSON.stringify(gameState) });
                showModal('Lưu trữ', 'Đã lưu trò chơi thành công vào đám mây!');
            } catch (error) {
                console.error("Error saving game state to Firestore:", error);
                showModal('Lỗi', 'Không thể lưu trò chơi. Vui lòng kiểm tra console.');
            }
        };

        const loadGame = async () => {
            try {
                await window.firebaseInitPromise;
                if (!userId || !db) {
                    showModal('Lỗi', 'Không thể tải trò chơi. Firebase chưa được khởi tạo.');
                    return;
                }
                const docRef = doc(db, `/artifacts/${appId}/users/${userId}/saves/save_data`);
                const docSnap = await getDoc(docRef);

                if (docSnap.exists()) {
                    const loadedState = JSON.parse(docSnap.data().data);
                    gameState = loadedState;
                    updateStoryDisplay();
                    showModal('Tải lên', 'Đã tải trò chơi thành công từ đám mây!');
                } else {
                    showModal('Tải lên', 'Không tìm thấy dữ liệu lưu trữ.');
                }
            } catch (error) {
                console.error("Error loading game state from Firestore:", error);
                showModal('Lỗi', 'Không thể tải trò chơi. Vui lòng kiểm tra console.');
            }
        };

        // Event Listeners and Initial Setup
        window.onload = async function() {
            await window.firebaseInitPromise;
            if (userId) {
                userIdDisplay.textContent = `ID người dùng: ${userId}`;
            }
            // Update UI to match the initial gameState
            updateStoryDisplay();
            updateChoices();
        };

        sendBtn.addEventListener('click', () => {
            const action = userInput.value.trim();
            if (action) {
                processUserAction(action);
            }
        });
        userInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const action = userInput.value.trim();
                if (action) {
                    processUserAction(action);
                }
            }
        });
        closeModalBtn.addEventListener('click', hideModal);
        modalBackdrop.addEventListener('click', (e) => {
            if (e.target === modalBackdrop) {
                hideModal();
            }
        });
        statsBtn.addEventListener('click', () => {
            let statsContent = gameState.character ? 
                `<strong>Tên:</strong> ${gameState.character.name}<br><strong>Tu vi:</strong> ${gameState.character.tu_vi} (Tiểu cảnh giới: ${gameState.character.tieu_canh_gioi})<br><strong>Tuổi thọ:</strong> ${gameState.character.tuoi_tho_hien_tai} / ${gameState.character.tuoi_tho_toi_da} năm` :
                "Bạn cần nhập thông tin nhân vật để bắt đầu.";
            showModal('Chỉ số nhân vật', statsContent);
        });
        inventoryBtn.addEventListener('click', () => {
            let itemsHtml = gameState.inventory && gameState.inventory.equipped_items.length > 0 ?
                gameState.inventory.equipped_items.map(item => `<li>${item.ten} (${item.do_ben_hien_tai}/${item.do_ben_toi_da})</li>`).join('') :
                'Không có trang bị nào.';
            showModal('Trang bị', `<ul>${itemsHtml}</ul>`);
        });
        wealthBtn.addEventListener('click', () => {
            let wealthContent = gameState.inventory && gameState.inventory.tai_phu ?
                `<strong>Linh thạch:</strong> ${gameState.inventory.tai_phu.linh_thach}` :
                'Chưa có tài phú.';
            showModal('Tài phú', wealthContent);
        });
        factionsBtn.addEventListener('click', () => {
            let factionsHtml = gameState.inventory && gameState.inventory.the_luc.length > 0 ?
                gameState.inventory.the_luc.map(p => `<li>${p.name}</li>`).join('') :
                'Chưa có mối quan hệ hay thế lực nào.';
            showModal('Thế lực & Mối quan hệ', `<ul>${factionsHtml}</ul>`);
        });
        saveBtn.addEventListener('click', saveGame);
        loadBtn.addEventListener('click', loadGame);
        userInput.addEventListener('input', () => {
            userInput.style.height = 'auto';
            userInput.style.height = userInput.scrollHeight + 'px';
        });

    </script>
</body>
</html>
